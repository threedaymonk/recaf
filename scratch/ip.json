{ children: 
   [ { type: 'VAR',
       value: 'var',
       children: 
        [ { type: 'IDENTIFIER',
            value: 'cubes',
            children: [],
            name: 'cubes',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'list',
            children: [],
            name: 'list',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'math',
            children: [],
            name: 'math',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'num',
            children: [],
            name: 'num',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'number',
            children: [],
            name: 'number',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'opposite',
            children: [],
            name: 'opposite',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'race',
            children: [],
            name: 'race',
            readOnly: false },
          { type: 'IDENTIFIER',
            value: 'square',
            children: [],
            name: 'square',
            readOnly: false } ],
       destructurings: [] },
     { type: 'VAR',
       value: 'var',
       children: 
        [ { type: 'IDENTIFIER',
            value: '__slice',
            children: [],
            name: '__slice',
            readOnly: false,
            initializer: 
             { type: 'DOT',
               value: '.',
               children: 
                [ { type: 'DOT',
                    value: '.',
                    children: 
                     [ { type: 'IDENTIFIER', value: 'Array', children: [] },
                       { type: 'IDENTIFIER',
                         value: 'prototype',
                         children: [] } ] },
                  { type: 'IDENTIFIER', value: 'slice', children: [] } ] } } ],
       destructurings: [] },
     { type: 'SEMICOLON',
       value: 'number',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: ';',
          children: 
           [ { type: 'IDENTIFIER', value: 'number', children: [] },
             { type: 'NUMBER', value: 42, children: [] } ],
          assignOp: null } },
     { type: 'SEMICOLON',
       value: 'opposite',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: ';',
          children: 
           [ { type: 'IDENTIFIER', value: 'opposite', children: [] },
             { type: 'TRUE', value: 'true', children: [] } ],
          assignOp: null } },
     { type: 'IF',
       value: 'if',
       children: [],
       condition: { type: 'IDENTIFIER', value: 'opposite', children: [] },
       labels: { table: {}, size: 0 },
       thenPart: 
        { type: 'BLOCK',
          value: '{',
          children: 
           [ { type: 'SEMICOLON',
               value: 'number',
               children: [],
               expression: 
                { type: 'ASSIGN',
                  value: '{',
                  children: 
                   [ { type: 'IDENTIFIER', value: 'number', children: [] },
                     { type: 'UNARY_MINUS',
                       value: '-',
                       children: [ { type: 'NUMBER', value: 42, children: [] } ] } ],
                  assignOp: null } } ],
          labels: { table: {}, size: 0 } },
       elsePart: null },
     { type: 'SEMICOLON',
       value: 'square',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: '}',
          children: 
           [ { type: 'IDENTIFIER', value: 'square', children: [] },
             { type: 'FUNCTION',
               value: 'function',
               children: [],
               params: [ 'x' ],
               body: 
                { type: 'SCRIPT',
                  value: '{',
                  children: 
                   [ { type: 'RETURN',
                       value: 
                        { type: 'MUL',
                          value: '*',
                          children: [ [Object], [Object] ] },
                       children: [] } ],
                  modDecls: [],
                  loadDeps: [],
                  hasEmptyReturn: false,
                  hasReturnWithValue: true,
                  isGenerator: false },
               functionForm: 1 } ],
          assignOp: null } },
     { type: 'SEMICOLON',
       value: 'list',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: ';',
          children: 
           [ { type: 'IDENTIFIER', value: 'list', children: [] },
             { type: 'ARRAY_INIT',
               value: '[',
               children: 
                [ { type: 'NUMBER', value: 1, children: [] },
                  { type: 'NUMBER', value: 2, children: [] },
                  { type: 'NUMBER', value: 3, children: [] },
                  { type: 'NUMBER', value: 4, children: [] },
                  { type: 'NUMBER', value: 5, children: [] } ] } ],
          assignOp: null } },
     { type: 'SEMICOLON',
       value: 'math',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: ';',
          children: 
           [ { type: 'IDENTIFIER', value: 'math', children: [] },
             { type: 'OBJECT_INIT',
               value: '{',
               children: 
                [ { type: 'PROPERTY_INIT',
                    value: ':',
                    children: 
                     [ { type: 'IDENTIFIER', value: 'root', children: [] },
                       { type: 'DOT',
                         value: '.',
                         children: [ [Object], [Object] ] } ] },
                  { type: 'PROPERTY_INIT',
                    value: ':',
                    children: 
                     [ { type: 'IDENTIFIER', value: 'square', children: [] },
                       { type: 'IDENTIFIER', value: 'square', children: [] } ] },
                  { type: 'PROPERTY_INIT',
                    value: ':',
                    children: 
                     [ { type: 'IDENTIFIER', value: 'cube', children: [] },
                       { type: 'FUNCTION',
                         value: 'function',
                         children: [],
                         params: [ 'x' ],
                         body: 
                          { type: 'SCRIPT',
                            value: '{',
                            children: [Object],
                            modDecls: [],
                            loadDeps: [],
                            hasEmptyReturn: false,
                            hasReturnWithValue: true,
                            isGenerator: false },
                         functionForm: 1 } ] } ] } ],
          assignOp: null } },
     { type: 'SEMICOLON',
       value: 'race',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: ';',
          children: 
           [ { type: 'IDENTIFIER', value: 'race', children: [] },
             { type: 'FUNCTION',
               value: 'function',
               children: [],
               params: [],
               body: 
                { type: 'SCRIPT',
                  value: '{',
                  children: 
                   [ { type: 'VAR',
                       value: 'var',
                       children: 
                        [ { type: 'IDENTIFIER',
                            value: 'runners',
                            children: [],
                            name: 'runners',
                            readOnly: false },
                          { type: 'IDENTIFIER',
                            value: 'winner',
                            children: [],
                            name: 'winner',
                            readOnly: false } ],
                       destructurings: [] },
                     { type: 'SEMICOLON',
                       value: 'winner',
                       children: [],
                       expression: 
                        { type: 'COMMA',
                          value: ',',
                          children: [ [Object], [Object] ] } },
                     { type: 'RETURN',
                       value: 
                        { type: 'CALL',
                          value: '(',
                          children: [ [Object], [Object] ] },
                       children: [] } ],
                  modDecls: [],
                  loadDeps: [],
                  hasEmptyReturn: false,
                  hasReturnWithValue: true,
                  isGenerator: false },
               functionForm: 1 } ],
          assignOp: null } },
     { type: 'IF',
       value: 'if',
       children: [],
       condition: 
        { type: 'AND',
          value: '&&',
          children: 
           [ { type: 'STRICT_NE',
               value: '!==',
               children: 
                [ { type: 'TYPEOF',
                    value: 'typeof',
                    children: [ { type: 'IDENTIFIER', value: 'elvis', children: [] } ] },
                  { type: 'STRING', value: 'undefined', children: [] } ] },
             { type: 'STRICT_NE',
               value: '!==',
               children: 
                [ { type: 'IDENTIFIER', value: 'elvis', children: [] },
                  { type: 'NULL', value: 'null', children: [] } ] } ] },
       labels: { table: {}, size: 0 },
       thenPart: 
        { type: 'BLOCK',
          value: '{',
          children: 
           [ { type: 'SEMICOLON',
               value: 'alert',
               children: [],
               expression: 
                { type: 'CALL',
                  value: '(',
                  children: 
                   [ { type: 'IDENTIFIER', value: 'alert', children: [] },
                     { type: 'LIST',
                       value: '(',
                       children: [ { type: 'STRING', value: 'I knew it!', children: [] } ] } ] } } ],
          labels: { table: {}, size: 0 } },
       elsePart: null },
     { type: 'SEMICOLON',
       value: 'cubes',
       children: [],
       expression: 
        { type: 'ASSIGN',
          value: '}',
          children: 
           [ { type: 'IDENTIFIER', value: 'cubes', children: [] },
             { type: 'CALL',
               value: '(',
               children: 
                [ { type: 'FUNCTION',
                    value: 'function',
                    children: [],
                    params: [],
                    body: 
                     { type: 'SCRIPT',
                       value: '{',
                       children: 
                        [ { type: 'VAR',
                            value: 'var',
                            children: [Object],
                            destructurings: [] },
                          { type: 'SEMICOLON',
                            value: '_results',
                            children: [],
                            expression: [Object] },
                          { type: 'FOR',
                            value: 'for',
                            children: [],
                            isLoop: true,
                            labels: [Object],
                            setup: [Object],
                            condition: [Object],
                            update: [Object],
                            body: [Object] },
                          { type: 'RETURN', value: [Object], children: [] } ],
                       modDecls: [],
                       loadDeps: [],
                       hasEmptyReturn: false,
                       hasReturnWithValue: true,
                       isGenerator: false },
                    functionForm: 1,
                    parenthesized: true },
                  { type: 'LIST', value: '(', children: [] } ] } ],
          assignOp: null } } ],
  type: 'SCRIPT',
  modDecls: [],
  loadDeps: [],
  hasEmptyReturn: false,
  hasReturnWithValue: false,
  isGenerator: false }
